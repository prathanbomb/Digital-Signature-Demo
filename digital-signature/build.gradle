plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

ext.versionMajor = 1
ext.versionMinor = 0
ext.versionPatch = 0

def static generateVersionName(versionMajor, versionMinor, versionPatch) {
    String versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    return versionName + "-alpha01"
}

def libraryGroupId = 'th.co.digio.smartedc'
def libraryArtifactId = 'digital-signature'
def libraryVersion = generateVersionName(versionMajor, versionMinor, versionPatch)

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'com.blankj:utilcodex:1.30.6'
    implementation 'com.itextpdf:sign:7.1.16'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

publishing {
    repositories {
        maven {
            url "artifactregistry://asia-maven.pkg.dev/androidsmartedc/smartedc"
        }
    }
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId
            artifact("$buildDir/outputs/aar/${artifactId}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode("dependencies")
                def dependencies = configurations.implementation.allDependencies + configurations.api.allDependencies
                dependencies.each {
                    if (it.group != "" && it.group != "unspecified" && it.name != "" && it.name != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode("dependency")
                        if (it.group == rootProject.name) {
                            dependencyNode.appendNode("groupId", groupId)
                            dependencyNode.appendNode("artifactId", it.name)
                            dependencyNode.appendNode("version", version)
                        } else {
                            dependencyNode.appendNode("groupId", it.group)
                            dependencyNode.appendNode("artifactId", it.name)
                            dependencyNode.appendNode("version", it.version)
                        }
                    }
                }
            }
        }
    }
}
